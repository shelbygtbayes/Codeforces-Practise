#include<iostream>
#include <stdlib.h>
#include<unordered_map>
#include<vector>
using namespace std;
vector<int> func(int* arr , int n)
{
  unordered_map<int , int> vis;
  vector< int > b(n,-1);
  for(int ind = 1 ; ind < n ; ind++)
  {
    if(arr[ind-1] != arr[ind])
    {
      b[ind] = arr[ind-1];
      vis[b[ind]] = 1;
    }
  }
  vis[arr[n-1]] = 1;
  int val = 0;
  for(int ind = 0 ; ind < n ; ind++)
  {
    while(vis[val])
      val++;
    if(b[ind] == -1)
    {
      b[ind] = val;
      vis[val] = 1;
    }
  }
  return b;
}
int main()
{
  int n;
  vector< int > ans;
  cin >> n;
  int * arr = new int[n];
  for(int ind = 0 ; ind < n ; ind++)
    cin >> arr[ind];
  ans = func(arr , n);
  for(auto elem : ans)
    cout << elem << " ";
  cout << endl;
  return 0;
}
/*
|               |
            3   4   8   6   9
            0   1   5   7   10
                0   0   2   3
            [3   8   6  9]

    vector<int> func(int * arr , int n)
    {
        vector<int> dp(n,0);
        vector<int> par(n,-1);
        vector<int> ans;
        int ans_diff = 0 , last_ind = -1;
        for(int end = 1 ; end < n ; end++)
        {
            for(int st = 0 ; st < end ; st++)
            {
                int diff = abs(arr[end] - arr[st]);
                if(dp[end] < diff + dp[st]) // length check 
                {
                    dp[end] = dp[st] + diff;
                }
                if(ans_diff < dp[end])
                {
                    par[end] = st;
                    ans_diff = dp[end];
                    last_ind = end;
                }
            }
        }
        if(last_ind == -1)
        {
        ans.push_back(arr[0]);
        ans.push_back(arr[1]);
        }
        else
        {
        while(last_ind != -1)
        {
            ans.push_back(arr[last_ind]);
            last_ind = par[last_ind];
        }
        reverse(ans.begin() , ans.end());
        }
        return ans;
    }
*/
